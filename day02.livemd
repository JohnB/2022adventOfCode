<!-- vim: syntax=markdown -->

# Day 02

```elixir
Mix.install([
  {:kino, "~> 0.7.0"}
])

IEx.Helpers.c("/Users/johnb/dev/2022adventOfCode/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input
```

## Installation and Data

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_day = Kino.Input.number("Day")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1example = Kino.Input.textarea("Example Data")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Part 1

### part 1 title here

* Add part 1 puzzle instructions here

```elixir
defmodule Day01 do
  def sorted_snack_sums(text) do
    text
    |> AOC.as_doublespaced_integers()
    |> Enum.map(&Enum.sum/1)
    |> Enum.sort()
    |> Enum.reverse()
  end

  def solve(text) do
    text
    |> sorted_snack_sums()
    |> List.first()
    |> IO.inspect()
  end

  def solve2(text) do
    text
    |> sorted_snack_sums()
    |> Enum.take(3)
    |> Enum.sum()
    |> IO.inspect()
  end
end

# p1data.()
# |> Day01.solve()
# 67027

p1data.()
|> Day01.solve2()

# 197291
```
